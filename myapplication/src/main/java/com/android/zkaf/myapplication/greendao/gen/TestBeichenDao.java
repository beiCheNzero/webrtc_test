package com.android.zkaf.myapplication.greendao.gen;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.android.zkaf.myapplication.main.model.TestBeichen;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TEST_BEICHEN".
*/
public class TestBeichenDao extends AbstractDao<TestBeichen, Void> {

    public static final String TABLENAME = "TEST_BEICHEN";

    /**
     * Properties of entity TestBeichen.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "Id", false, "ID");
        public final static Property TestUserName = new Property(1, String.class, "testUserName", false, "TEST_USER_NAME");
        public final static Property TestPassword = new Property(2, String.class, "testPassword", false, "TEST_PASSWORD");
    }


    public TestBeichenDao(DaoConfig config) {
        super(config);
    }
    
    public TestBeichenDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TEST_BEICHEN\" (" + //
                "\"ID\" INTEGER," + // 0: Id
                "\"TEST_USER_NAME\" TEXT," + // 1: testUserName
                "\"TEST_PASSWORD\" TEXT);"); // 2: testPassword
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TEST_BEICHEN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TestBeichen entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String testUserName = entity.getTestUserName();
        if (testUserName != null) {
            stmt.bindString(2, testUserName);
        }
 
        String testPassword = entity.getTestPassword();
        if (testPassword != null) {
            stmt.bindString(3, testPassword);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TestBeichen entity) {
        stmt.clearBindings();
 
        Long Id = entity.getId();
        if (Id != null) {
            stmt.bindLong(1, Id);
        }
 
        String testUserName = entity.getTestUserName();
        if (testUserName != null) {
            stmt.bindString(2, testUserName);
        }
 
        String testPassword = entity.getTestPassword();
        if (testPassword != null) {
            stmt.bindString(3, testPassword);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public TestBeichen readEntity(Cursor cursor, int offset) {
        TestBeichen entity = new TestBeichen( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // Id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // testUserName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // testPassword
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TestBeichen entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTestUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTestPassword(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(TestBeichen entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(TestBeichen entity) {
        return null;
    }

    @Override
    public boolean hasKey(TestBeichen entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
